services:
  front:
    image_name: fi-front
    container_name: frontend
    depends_on: 
      - back-apps
      - back-user
      - database
    context: ../frontend-project/fimarket/
    build:
      dockerfile: Dockerfile
    restart: always
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://front:3000"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 5s
    user: "fimarket"
  back-apps:
    image_name: fi-back-apps
    container_name: back-apps
    depends_on: database
    context: ./api_apps/
    build:
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8000:8000"
    environment:
      FLASK_APP: app.py 
      FLASK_ENV: production 
      MONGODB_USER: ${MONGO_INITDB_ROOT_USERNAME}
      MONGODB_PASS: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGODB_HOST: database
      port: 8000
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://back-apps:8000/healthcheck"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 5
  back-user:
    image_name: fi-back-user
    container_name: back-user
    depends_on: database
    context: ./api_user/
    build:
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8001:8001"
    environment:
      FLASK_APP: app.py 
      FLASK_ENV: production 
      MONGODB_USER: ${MONGO_INITDB_ROOT_USERNAME}
      MONGODB_PASS: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGODB_HOST: database
      port: 8001
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://back-user:8001/healthcheck"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 5
  database:
    image: mongo:4.0.0
    image_name: fi-mongo
    container_name: mongodb
    volumes:
      - /opt/mongodb/data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
  
